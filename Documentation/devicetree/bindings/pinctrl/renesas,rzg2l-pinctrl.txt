Renesas RZ/G2L and RZ/V2L combined Pin and GPIO controller

The Renesas SoCs of the RZ/G2L and RZ/V2L family feature a combined Pin and GPIO controller,
named "P" in the hardware reference manual.
Pin multiplexing and GPIO configuration is performed on a per-pin basis
writing configuration values to per-port register sets.
Each "port" features up to 8 pins, each of them configurable for GPIO
function (port mode) or in alternate function mode.
Up to 4 different alternate function modes exist for each single pin.

Pin controller node
-------------------

Required properties:
  - compatible: should be:
    - "renesas,r9a07g044l-pinctrl": for R9A07G044L SoC.
    - "renesas,r9a07g054l-pinctrl": for R9A07G054L SoC.

  - reg: include 2 areas:
    1st: address base and length of the memory area where the pin controller
         hardware is mapped to.
    2nd: address base and length of the memory area where the interrupt
         controller hardware is mapped to.
         Here is a part of IA55 module's area.

Example:
Pin controller node for R9A07G044L SoC.

pinctrl: pin-controller@11030000 {
	compatible = "renesas,r9a07g044l-pinctrl";

	reg = <0 0x11030000 0 0x10000>, <0 0x110a0020 0 0x30>;
};

The PFC node also acts as a container for pin configuration nodes. Please refer
to pinctrl-bindings.txt in this directory for the definition of the term "pin
configuration node" and for the common pinctrl bindings used by client devices.

Each pin configuration node represents a desired configuration for a pin, a
pin group, or a list of pins or pin groups. The configuration can include the
function to select on those pin(s) and pin configuration parameters (such as
pull-up and pull-down).

Pin configuration nodes contain pin configuration properties, either directly
or grouped in child subnodes. Both pin muxing and configuration parameters can
be grouped in that way and referenced as a single pin configuration node by
client devices.

A configuration node or subnode must reference at least one pin (through the
pins or pin groups properties) and contain at least a function or one
configuration parameter. When the function is present only pin groups can be
used to reference pins.

All pin configuration nodes and subnodes names are ignored. All of those nodes
are parsed through phandles and processed purely based on their content.

Pin Configuration Node Properties:

- pins : An array of strings, each string containing the name of a pin.
- groups : An array of strings, each string containing the name of a pin
  group.

- function: A string containing the name of the function to mux to the pin
  group(s) specified by the groups property.

  Valid values for pin, group and function names can be found in the group and
  function arrays of the PFC data file corresponding to the SoC
  (drivers/pinctrl/rzg2l/pinctrl-*.c)

The pin configuration parameters use the generic pinconf bindings defined in
pinctrl-bindings.txt in this directory. The supported parameters are
bias-disable, bias-pull-up, bias-pull-down, drive-strength, slew-rate, input-enable.

  Example: pin control maps for the SCIF2 devices
	&pinctrl {
		scif2_pins: scif2 {
			groups = "scif2_data_a", "scifa2_ctrl_a";
			function = "scif2";
		};
	};

- GPIO controller:
In RZ/G2L, the PFC node is also a GPIO controller node.

Required properties:
- gpio-controller
  empty property as defined by the GPIO bindings documentation.
- #gpio-cells
  number of cells required to identify and configure a GPIO.
  Shall be 2. The first cell is the GPIO number and the second
  cell specifies GPIO flags, as defined in <dt-bindings/gpio/gpio.h>.
  Only the GPIO_ACTIVE_HIGH and GPIO_ACTIVE_LOW flags are supported.
- gpio-ranges
  Describes a GPIO controller specifying its specific pin base, the pin
  base in the global pin numbering space, and the number of controlled
  pins, as defined by the GPIO bindings documentation. Refer to
  Documentation/devicetree/bindings/gpio/gpio.txt file for a more detailed
  description.
- interrupts: Interrupt specifier for the controllers interrupt.

The syntax of the gpio specifier used by client nodes should be the following
with values derived from the SoC user manual.
  <[phandle of the gpio controller node]
   [pin number within the gpio controller]
   [flags]>

  Example: A GPIO LED node that references a GPIO P1_0
	#include <dt-bindings/gpio/gpio.h>
	#include <dt-bindings/pinctrl/pinctrl-rzg2l.h>
	led1 {
		compatible = "gpio-leds";
		gpios = <&pinctrl RZG2L_GPIO(1, 0) GPIO_ACTIVE_LOW>;
	};

The GPIO controller also acts as an interrupt controller.
Required properties:
- interrupt-controller
  Empty property that mark this node as an interrupt controller.
- #interrupt-cells
  It uses the default two cells specifier as described in
  Documentation/devicetree/bindings/interrupt-controller/interrupts.txt.
  Currently, GPIO interrupt can only support edge trigger condition:
  + Rising.
  + Falling.

  Example: A GPIO pin (P1_1) is used as GPIO interrupt
	#include <dt-bindings/interrupt-controller/arm-gic.h>
	#include <dt-bindings/pinctrl/pinctrl-rzg2l.h>
	&eth0 {
		...

		phy0: ethernet-phy@7 {
			...
			interrupt-parent = <&pinctrl>;
			interrupts = <RZG2L_GPIO(1, 0) IRQ_TYPE_EDGE_FALLING>;
			...
		};
	};
